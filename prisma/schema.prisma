generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  name          String
  email         String    @unique
  avatarUrl     String?
  status        String    @default("offline")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  servers       Server[]  @relation("ServerMembers")
  ownedServers  Server[]
  messages      Message[]
  friendRequests FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
}

model Server {
  id          String    @id @default(cuid())
  name        String
  description String?
  iconUrl     String?
  tier        String    @default("lilypad")
  ownerId     String
  owner       User      @relation(fields: [ownerId], references: [id])
  members     User[]    @relation("ServerMembers")
  categories  Category[]
  channels    Channel[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id        String    @id @default(cuid())
  name      String
  serverId  String
  server    Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)
  channels  Channel[]
  isPrivate Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Channel {
  id         String    @id @default(cuid())
  name       String
  type       String    @default("river")
  serverId   String
  server     Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  messages   Message[]
  isPrivate  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  channelId String
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FriendRequest {
  id         String   @id @default(cuid())
  senderId   String
  sender     User     @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   User     @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}